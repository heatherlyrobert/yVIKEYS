.TH vi-keys 7 2010-Jan "linux" "heatherly custom tools manual"
.na

.SH NAME
yVIKEYS \- versatile, efficient, universal keyboard mini-language

.SH SUMMARY
yVIKEYS is a standardized, fullsome, vi/vim-like, purely keyboard-centric,
modal interface and application framework to provide wicked, powerful, and
high-end features to ALL my applications.

.SH PHASE I: start minimal (baby steps)
the goal is to compile without errors, display the screen correctly, and accept
":qa¦" to exit.

.B Makefile
   LIB_MINE = ... -lyVIKEYS_debug ...

.B header
   #include <yVIKEYS.h>

.B PROG_init, info line is for debugging purposes
   DEBUG_PROG   yLOG_info     ("yVIKEYS" , yVIKEYS_version ());
   yVIKEYS_init   (NULL);
   yVIKEYS_whoami (<prog>, <ext>, <vernum>, <vertxt>, ...);

.B PROG_end
   yVIKEYS_wrap ();

.B PROG_final
   yVIKEYS_view_config (<title>, <ver>, <environ>, <wide>, ...);
   yVIKEYS_view_setup  (YVIKEYS_MAIN, <mode>, <anchor>, <x>, ...);

.B DRAW_show, to aid in early debugging (trust me)
   yVIKEYS_view_size     (YVIKEYS_MAIN, &x_left, &x_wide, ...);
   DEBUG_GRAF   yLOG_complex  ("size"      , "%3dl, %3dw, ...);
   yVIKEYS_view_bounds   (YVIKEYS_MAIN, &x_xmin, &x_xmax, ...);
   DEBUG_GRAF   yLOG_complex  ("bounds"    , "%3dx to %3dx...);

.B instead of a loop in main
   rc = yVIKEYS_main  (<speed>, <update>, NULL);

.SH PHASE II: movements
the goal is to allow all the map mode movement keys to function properly.

.B PROG_final
   yVIKEYS_map_config    (YVIKEYS_OFFICE, <mapper>, <locator>, ...);
   yVIKEYS_map_refresh   ();

.B api_vikeys_mapper
   create function to populate map data structure for b, x, y, and z

.B api_vikeys_locator (char *a_label, int *a_buf, ...);
   unless you have some type of standard addresses, just return -1

.B api_vikeys_addressor (char *a_label, int a_buf, ...);
   unless you have some type of standard addresses, just return -1












.SH PHASE II: basic main window configuration and drawing
only a single configuration call and a new function are required to draw the
main window.  after compiling, the program will display a static version of
the main window allowing prototyping.

.B configuration
   1) yVIKEYS_view_basic (YVIKEYS_MAIN, YVIKEYS_FLAT, ..., <func>);

.B drawing is simple
   2) add "char <func> (void)" to your program
   3) use yVIKEYS_view_size   (YVIKEYS_MAIN, ...) to get window sizes
   .) for opengl use yVIKEYS_view_bounds (YVIKEYS_MAIN, ...)
   4) add pure drawing code (no setup) to fill within size/bounds

even if you just draw a test pattern, this step is useful early.

.SH PHASE III: main window movements



   yVIKEYS_map_config    (YVIKEYS_OFFICE, MAP_mapper, LOC_locator, LOC_addressor);

   char MAP_mapper (char a_req)

   char LOC_locator (char *a_label, int *a_x, int *a_y, int *a_z, int *a_w)

   char LOC_addressor (char *a_label, int a_x, int a_y, int a_z, int a_w)

   yVIKEYS_map_refresh ();



   7) yVIKEYS_map_config    (YVIKEYS_OFFICE, MAP_mapper, LOC_locator, LOC_addressor);

   PROG_final       
   yVIKEYS_view_config   ("gyges spreadsheet", VER_NUM, YVIKEYS_CURSES, 0, 0, 0);
   yVIKEYS_map_config    (YVIKEYS_OFFICE, MAP_mapper, LOC_locator, LOC_addressor);
   -- yVIKEYS_view_config to establish main window and sizing
   -- yVIKEYS_cmds_direct to set the color palette
   -- yVIKEYS_view_colors to assign colors to areas

.B main...


.B main...
   -- yVIKEYS_main instead of a custom event loop




.SH PREPARATION....

.SS PROG_init.  
before any argument handling, the yVIKEYS library should be initialized with a
call to yVIKEYS_init.

.B yVIKEYS_init.  
this action will take care of a majority of the standard setup and preparation.

.B yVIKEYS_macro_config.  
optional.  provides local macro storage and retrieval functions.

.B yVIKEYS_srch_config.  
provides local searching and marking functions to tailor search.

.SS DRAW_init.  
before drawing begins, it is critical to configure the parts, sizes,
coordinates, and drawing functions involved.

.B yVIKEYS_view_init.  
sets the window title, program version, drawing environment (opengl or
ncurses), and window sizes.

.B yVIKEYS_view_setup, _moderate, simple.  
used for each custom window part to set the corrdinate system, color, and
drawing function.

.B yVIKEYS_view_option.  
adds options to support screen parts, such as the status, formula, overlays,
grids, etc.

.B yVIKEYS_layer_add.  
adds specific main window elements as individual layers so they can be selected
or hidden as desired.

.B yVIKEYS_view_ribbon.  
adds specific icons to the ribbon bar for interactive, opengl, touch screen use.

.B yVIKEYS_cmds_direct (":palette .....").  
establishes a beautiful color scheme including all accents and variations
available for drawing.

.B yVIKEYS_view_colors.  
assigns palette colors to the support windows such as status, ribbon, buffer,
and title.

.B yVIKEYS_cmds_direct (":layout .....").  
sets the base combination of screen parts to display when the program begins.

.B yVIKEYS_cmds_direct (":..... hide/show/...").  
turns individual elements on and off, and allows specific options to be chosen.

.B yVIKEYS_map_config.  
passes the function to be used to map the screen to keyboard keys so yVIKEYS
can function.

.SS PROG_final.  
after all program and drawing initiation, this is where the final actions take
place.

.B yVIKEYS_cmds_add.  
add new commands accessable from the command line to expand the programs
abilities.

.SH MAIN LOOP....

.B yVIKEYS_main_input.  
handles consolidating and recording keyboard input from the user and/or macros.

.B yVIKEYS_main_handle.  
dispatches keys to various handler routines using the standard modal interface.

.B yVIKEYS_quit.  
identifies if program exit has been requested from the command line, i.e., quit.

.B yVIKEYS_view_all.  
coordinates all window drawing from automatic support elements to call-backs
for the main window.


.SH DRAWING ROUTINES....

.B yVIKEYS_view_size.  
retrieve the latest window sizes for the current screen part.

.B yVIKEYS_view_bounds.  
retrieve the latest min and max's for the current screen part.

.B yVIKEYS_view_coords.  
retrieve the latest coordinates for the current screen part.

.B yVIKEYS_view_color and _color_adj.  
choose a particular color for drawing from within the estabished palette.

.SH COMPLETE....

.SS PROG_end.  
after program completion, it is quite simple to shut the library down.

.B yVIKEYS_wrap.  


.SH KEYBOARD MACROS (sub-mode)
.nf
.BI "char yVIKEYS_macro_init      (void *" "a_loader" ", void *" "a_saver" ");"
.BI "char yVIKEYS_macro_wrap      (void);"
.BI "char yVIKEYS_macro_reset     (void);"
.BI "char yVIKEYS_macro_rec_key   (char  " "a_key" ");"
.BI "char yVIKEYS_macro_rec_end   (void);"
.BI "char yVIKEYS_macro_define    (char *" "a_string" ");"
.BI "char yVIKEYS_macro_exec_beg  (char  " "a_name" ");"
.BI "char yVIKEYS_macro_exec_adv  (void);"
.BI "char yVIKEYS_macro_exec_key  (void);"
.BI "char yVIKEYS_macro_exec_wait (void);"
.BI "char yVIKEYS_macro_exec_play (char  " "a_key" ");"
.BI "char yVIKEYS_macro_smode     (char  " "a_major" ", char  " "a_minor" ");"
.BI "char yVIKEYS_macro_get_mode  (void);"
.BI "char yVIKEYS_macro_set_mode  (char  " "a_mode" ");"

.SH MODE
.B setup.  
when you begin the program, you must initialize the mode system.
   yVIKEYS_mode_init  ();
   yVIKEYS_mode_enter (MODE_MAP);



.SH MAP
mapping requires knowledge of the layout within the coordinate system so moves
can be adjusted to real situations.

when you begin the program, you must initialize the mode system.
   yVIKEYS_map_init   ();



.SH COMMANDS
no actions, besides calling yVIKEYS_init, are required for commands to
function properly.  but, there are only two public functions associated with
the command line to add functionality.

.B yVIKEYS_cmds_add, 
temporarily adds a new command to the system, only accessable by this program
instance.  it has six arguments...
   char   cat        standard menu reference
   char*  name       full name of command
   char*  abbr       shortened form of command (if useful)
   char*  terms      description of function argument types
   void*  func       function which implements command
   char*  desc       generally available description

.B yVIKEYS_cmds_direct, 
executes a command without any interactive user input -- useful, simple,
supports batch use.  only one argument...
   char*  command    command line as it would have been typed (:)


.SH HINTS (sub-mode)
once the yVIKEYS system is initiated, hinting is relatively simple to implement.
the source application must handle drawing the hints, but most other logic
is handled in the library.

.SS 1) implement two straw-man handlers...
both strawmen can be named whatever you wish, but must return 0 if successful
and < 0 upon failure.

.BI "char hinter    (char *" "a_hint" ") { }"
      this will later be built out to handle hint requests.

.BI "char unhinter  (int " "b" ", int " "x" ", int " "y" ", int " "z" ") { }"
      this will later be built out to handle hint clearing.

.SS 2) configure hint handling during initialization
this will route specific hint requests to your program.  without this step
all hint requests will be ignored.

.B yVIKEYS_hint_config (hinter, unhinter);

.SS 3) when building objects, add hints so they are stable
add LEN_SHORT string to the objects, then use ySTR's strlhint to generate
hints when an object is created.  also add a char field to indicate if
object is hinted, marked, and or found in search.

.B strlhint (<seq>, <format>, <hint>)

.B NOT_HINT (<flag>)   this turns off hint

.SS 4) modify drawing logic to show/hide hints
library provides a function to use during drawing which will indicate whether
to show hints.  it returns TRUE is shown, FALSE if hidden.

.B yVIKEYS_hinting ()

.SS 5) add ability to highlight hints (optional)
use flags on the data objects to check, then highlight during the draw cycle.
yCOLOR library as a specific color assigned.

.B HAS_HINT (<flag>)   this returns TRUE if hinted, FALSE if not.

.B yCOLOR_curs ("m_hint");  sets the hint color in ncurses.

.B yCOLOR_opengl ("m_hint");  sets the hint color in opengl.

.SS 6) add hinter logic to interpret hint requests
interpret ";;´´¦" as requesting a specific hint and then register specific hint
or hints.

.B yVIKEYS_hint_found (a_label, b, x, y, z);

.B SET_HINT (<flag>)   this turns the hint on

.SS 7) add hinter logic to redraw prepared objects
handle the hint string "update" as request a redraw if pre-prepared drawing
strings.  this is only necessary if everything is not drawn real-time,
otherwise, just ignore.

.SS 8) build unhinter logic to clear a hint
find an object based on the coordinates and then clear the hint flag.

.B NOT_HINT (<flag>)   this turns off hint


.SH MARKS (sub-mode)
once the yVIKEYS system is initiated, marking is relatively simple to implement.
the source application must handle drawing the marks, and advanced mapping must
be implemented (see mapping).

.SS 1) modify drawing logic to show/hide marks
library provides a function to use during drawing which will indicate whether
to show marks.  send it the location label, i.g., 0a1 in gyges.  it returns
the mark character if is shown and current label is marked, < 0 if hidden.

.B yVIKEYS_marking (label)

.B yCOLOR_curs ("m_temp");  sets the mark color in ncurses.

.B yCOLOR_opengl ("m_temp");  sets the mark color in opengl.

recommend that the marks are shown in the same spot as hints.  check marks
first and show if exists as å'aæ. if not a mark, show hint as åaaæ or empty.

.SH SEARCH (mode)
searching requires more of the host application as it must use yREGEX to
conduct the search and draw the results.  all else is in the library.

.SS 1) implement two straw-man handlers...
both strawmen can be named whatever you wish, but must return 0 if successful
and < 0 upon failure.

.BI "char searcher   (char *" "a_search" ") { }"
      this will later be built out to handle search requests.

.BI "char unsearcher (int " "b" ", int " "x" ", int " "y" ", int " "z" ") { }"
      this will later be built out to handle search clearing.

.SS 2) configure search handling during initialization
this will route specific search requests to your program.  without this step
all search requests will be ignored.

.B yVIKEYS_srch_config (searcher, unsearcher);

.SS 3) when building objects, add flag field
add a char field to indicate if object is hinted, marked, and or found
in search.

.B NOT_SRCH (<flag>)   this turns off found in search

.SS 4) add ability to highlight search finding (optional)
use flags on the data objects to check, then highlight during the draw cycle.
yCOLOR library as a specific color assigned.

.B HAS_SRCH (<flag>)   this returns TRUE if found, FALSE if not.

.B yCOLOR_curs ("m_srch");  sets the search color in ncurses.

.B yCOLOR_opengl ("m_srch");  sets the search color in opengl.

.SS 5) add searcher logic to conduct searches
add yREGEX library to program.  then compile the search.  finally execute
the search on each data item, marking thoses that match.

.B yREGEX_comp (a_search + 1);

.B yREGEX_exec (<text field>);

.B yVIKEYS_srch_found (a_label, b, x, y, z);

.B SET_SRCH (<flag>)   this turns the search finding on

.SS 6) build unsearcher logic to clear a search finding
find an object based on the coordinates and then clear the search flag.

.B NOT_SRCH (<flag>)   this turns off search finding

.SH OVERLAY (display)
overlays are quite easy to implement, and their can be any number of them.







.SH VIEW


.B yVIKEYS_view_init (cchar*, cchar*, cint, cint, cint)

init prepares the view environment for use and takes five arguments.  the first
two are the title and version number.  the next two are the width and height
of the main window.  the final arg is the width of the alt-view window.



.SH SEE ALSO
this documentation is layered to provide easier navigation.
   yVIKEYS (3), interfacing applications with yVIKEYS
   yVIKEYS (5), data file format and structure
   yVIKEYS (6), interactive system usage and navigation
   yVIKEYS (7), decision rationale, objectives, and overview
   yVIKEYS (9), user interface behavior guarantees (automation)

.SH AUTHOR
jelloshrike at gmail dot com

.SH COLOPHON
this page is part of a documentation package meant to make use of the
heatherly tools easier and faster.

